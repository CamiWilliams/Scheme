#lang racket
(#%provide (all-defined))

;======================================01.a=======================================
(define-syntax-rule (seq expr1 expr2)
  'UNIMPLEMENTED
  )

;======================================01.b=======================================
(define-syntax-rule (while condition body)
  'UNIMPLEMENTED
  )
;======================================02=======================================

(define (empty-tree)
  'UNIMPLEMENTED
  )

(define (empty-tree? tree)
  'UNIMPLEMENTED  
  )

(define (bstree root)
  'UNIMPLEMENTED
  )

(define (tree->root tree)
  'UNIMPLEMENTED  
  )

(define (tree->left tree)
  'UNIMPLEMENTED  
  )

(define (tree->right tree)
  'UNIMPLEMENTED  
  )

(define (insert-tree n t)
  'UNIMPLEMENTED  
  )

(define (tree->list tree)
  'UNIMPLEMENTED  
  )

;======================================03=======================================
;you should use this function to create the error messages.
(define (invalid-args-msg fun-name-as-string
                          expected-value-type-as-predicate-string
                          received)
  (string-append "Invalid arguments in: " fun-name-as-string " --- "
                 "expected: " expected-value-type-as-predicate-string " --- "
                 "received: " (~a received)
                 )
  )


(define (regular-file name n)
  'UNIMPLEMENTED  
)

(define (empty-directory name)
  'UNIMPLEMENTED  
)

(define (extend-directory f-1 f-2)
  'UNIMPLEMENTED  
)

(define (regular-file? f)
  'UNIMPLEMENTED  
)

(define (empty-directory? f)
  'UNIMPLEMENTED  
)

(define (extend-directory? f)
  'UNIMPLEMENTED  
)

(define (regular-file->name f)
  'UNIMPLMENTED  
)

(define (regular-file->bytes f)
  'UNIMPLEMENTED
  
  )

(define (empty-directory->name f)
  'UNIMPLEMENTED
  
  )
;;two extractors, one for each piece of data representing an extend-dir
(define (extend-directory->f-1 f)
  'UNIMPLEMENTED  
)


(define (extend-directory->f-2 f)
  'UNIMPLEMENTED  
)