#lang racket
(#%provide (all-defined))
(#%require (lib "eopl.ss" "eopl"))
(#%require "util-lib.rkt")

#|
IMPORTANT: Don't forget to make sure that the uncommented version of your tests
compiles before submitting.

|#
;=======================================01======================================
;1.a
(define (invalid-args-msg fun-name-as-string
                          expected-value-type-as-predicate-string
                          received)
  (string-append "Invalid arguments in: " fun-name-as-string " --- "
                 "expected: " expected-value-type-as-predicate-string " --- "
                 "received: " (to-string received)
                 )
)

;You can compare the contents of this answer sheet with the answer sheet of the
;previous two homeworks to infer what is generated automatically by define-datatype.

(define (regular-file? f)
  'unimplemented
  )

(define (empty-directory? f)
  'UNIMPLEMENTED
)

(define (extend-directory? f)
  'UNIMPLEMENTED
)

(define (regular-file->name f)
  'UNIMPLEMENTED
)

(define (regular-file->bytes f)
  'UNIMPLEMENTED
)

(define (empty-directory->name f)
  'UNIMPLEMENTED
)


(define (extend-directory->f-1 f)
  'UNIMPLMENTED
)


(define (extend-directory->f-2 f)
  'UNIMPLEMENTED
)



;;1.b ===================================
(define (total-size file1)
  'UNIMPLEMENTED
)
;=======================================02======================================
;2.a
(define (exception-no-binding-msg sym)
  (string-append "No binding for '" (~a sym))
  )

;
(define-datatype environment environment?
  ;delete this unimplemented variant from your solution
  (unimplemented-env)
  )

(define (apply-env env search-sym)
  'UNIMPLEMENTED
  )

;==========
;2.b
(define (exception-sym-final-msg sym)
  (string-append "Symbol '" (~a sym) " is final and cannot be overriden.")
  )

;It is prefered to give meaningfull names to marker values.
;In the tests we will be using these two values to invoke
;the extend-env-wrapper function
(define FINAL #t)
(define NON-FINAL #f)

(define (extend-env-wrapper sym val old-env final?)
  'UNIMPLEMENTED
  )

;=======================================03======================================
;3.a.
(define-datatype expression expression?
  (unimplemented-expression)
  )

;.3.b
(define (evaluate-expression expr)
  'UNIMPLEMENTED
  )

;3.c
#|
the "eval" function takes a list of symbols and evaluates them as if they
were a valid racket program.

> (define x 42)
> (eval '(+ x 3))
42

> (eval '(+ (- 100 50) 3 (* 2 5)))
63

Your translate-to-racket will have to return a list such that eval will
yield the correct value of the expression.
|#
(define (translate-to-racket expr)
  'UNIMPLEMENTED
  )
